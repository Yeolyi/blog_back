{"pathArr":[],"metaData":{"title":"테스트 주도 개발"},"content":"\n```java\npackage Money;\n\nimport java.util.Hashtable;\n\ninterface Expression {\n  Money reduce(Bank bank, String to);\n  Expression plus(Expression addend);\n  Expression times(int multiplier);\n}\n\nclass Money implements Expression {\n\n  protected int amount;\n  protected String currency;\n\n  Money(int amount, String currency) {\n    this.amount = amount;\n    this.currency = currency;\n  }\n\n  public boolean equals(Object object) {\n    Money money = (Money) object;\n    return money.amount == amount && money.currency == currency;\n  }\n\n  static Money dollar(int amount) {\n    return new Money(amount, \"USD\");\n  }\n\n  static Money franc(int amount) {\n    return new Money(amount, \"CHF\");\n  }\n\n  public Expression times(int multiplier) {\n    return new Money(amount * multiplier, currency);\n  }\n\n  String currency() {\n    return currency;\n  }\n\n  public Expression plus(Expression addend) {\n    return new Sum(this, addend);\n  }\n\n  public Money reduce(Bank bank, String to) {\n    int rate = bank.rate(currency, to);\n    return new Money(amount / rate, to);\n  }\n}\n\nclass Sum implements Expression {\n\n  Expression augend;\n  Expression addend;\n\n  Sum(Expression augent, Expression addend) {\n    this.augend = augent;\n    this.addend = addend;\n  }\n\n  public Money reduce(Bank bank, String to) {\n    int amount = augend.reduce(bank, to).amount + addend.reduce(bank, to).amount;\n    return new Money(amount, to);\n  }\n\n  public Expression plus(Expression addend) {\n    return new Sum(this, addend);\n  }\n\n  public Expression times(int multiplier) {\n    return new Sum(augend.times(multiplier), addend.times(multiplier));\n  }\n}\n\nclass Bank {\n\n  private Hashtable<Pair, Integer> rates = new Hashtable<Pair, Integer>();\n\n  Money reduce(Expression source, String to) {\n    return source.reduce(this, to);\n  }\n\n  int rate(String from, String to) {\n    if (from.equals(to)) {\n      return 1;\n    }\n    int rate = rates.get(new Pair(from, to));\n    return rate;\n  }\n\n  void addRate(String from, String to, int rate) {\n    rates.put(new Pair(from, to), rate);\n  }\n\n  private class Pair {\n\n    private String from;\n    private String to;\n\n    Pair(String from, String to) {\n      this.from = from;\n      this.to = to;\n    }\n\n    public boolean equals(Object object) {\n      Pair pair = (Pair) object;\n      return from.equals(pair.from) && to.equals(pair.to);\n    }\n\n    public int hashCode() {\n      return 0;\n    }\n  }\n}\n```\n\n```java\npackage Money;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\n// testEquality에서 책에는 언급되지 않은 // Unlikely argument type for equals(): Dollar seems to be unrelated to FrancJava(1201)가 뜸.\npublic class MoneyTest {\n\n  @Test\n  public void testMultiplication() {\n    Money five = Money.dollar(5);\n    assertEquals(Money.dollar(10), five.times(2));\n    assertEquals(Money.dollar(15), five.times(3));\n  }\n\n  // 여기서 실패하면 곰셈 테스트도 실패함을 주의\n  @Test\n  public void testEquality() {\n    assertTrue(Money.dollar(5).equals(Money.dollar(5)));\n    assertFalse(Money.dollar(6).equals(Money.dollar(5)));\n    assertFalse(Money.franc(5).equals(Money.dollar(5)));\n  }\n\n  @Test\n  public void testFrancMultiplication() {\n    Money five = Money.franc(5);\n    assertEquals(Money.franc(10), five.times(2));\n    assertEquals(Money.franc(15), five.times(3));\n  }\n\n  @Test\n  public void testCurrency() {\n    assertEquals(\"USD\", Money.dollar(1).currency());\n    assertEquals(\"CHF\", Money.franc(1).currency());\n  }\n\n  @Test\n  public void testSimpleAddition() {\n    Money five = Money.dollar(5);\n    Expression sum = five.plus(five);\n    Bank bank = new Bank();\n    Money reduced = bank.reduce(sum, \"USD\");\n    assertEquals(Money.dollar(10), reduced);\n  }\n\n  @Test\n  public void testPlusReturnsSum() {\n    Money five = Money.dollar(5);\n    Expression result = five.plus(five);\n    Sum sum = (Sum) result;\n    assertEquals(five, sum.augend);\n    assertEquals(five, sum.addend);\n  }\n\n  @Test\n  public void testReduceSum() {\n    Expression sum = new Sum(Money.dollar(3), Money.dollar(4));\n    Bank bank = new Bank();\n    Money result = bank.reduce(sum, \"USD\");\n    assertEquals(Money.dollar(7), result);\n  }\n\n  @Test\n  public void testReduceMoney() {\n    Bank bank = new Bank();\n    Money result = bank.reduce(Money.dollar(1), \"USD\");\n    assertEquals(Money.dollar(1), result);\n  }\n\n  @Test\n  public void testReduceMoneyDifferentCurrency() {\n    Bank bank = new Bank();\n    bank.addRate(\"CHF\", \"USD\", 2);\n    Money result = bank.reduce(Money.franc(2), \"USD\");\n    assertEquals(Money.dollar(1), result);\n  }\n\n  @Test\n  public void testIdentityRate() {\n    Bank bank = new Bank();\n    assertEquals(1, bank.rate(\"USD\", \"USD\"));\n  }\n\n  @Test\n  public void testMixedAddition() {\n    Expression fiveBucks = Money.dollar(5);\n    Expression tenFrancs = Money.franc(10);\n    Bank bank = new Bank();\n    bank.addRate(\"CHF\", \"USD\", 2);\n    Money result = bank.reduce(fiveBucks.plus(tenFrancs), \"USD\");\n    assertEquals(Money.dollar(10), result);\n  }\n\n  @Test\n  public void testSumPlusMoney() {\n    Expression fiveBucks = Money.dollar(5);\n    Expression tenFrancs = Money.franc(10);\n    Bank bank = new Bank();\n    bank.addRate(\"CHF\", \"USD\", 2);\n    Expression sum = new Sum(fiveBucks, tenFrancs).plus(fiveBucks);\n    Money result = bank.reduce(sum, \"USD\");\n    assertEquals(Money.dollar(15), result);\n  }\n\n  @Test\n  public void testSumTimes() {\n    Expression fiveBucks = Money.dollar(5);\n    Expression tenFrancs = Money.franc(10);\n    Bank bank = new Bank();\n    bank.addRate(\"CHF\", \"USD\", 2);\n    Expression sum = new Sum(fiveBucks, tenFrancs).times(2);\n    Money result = bank.reduce(sum, \"USD\");\n    assertEquals(Money.dollar(20), result);\n  }\n}\n```\n\n```py\n# 자기 참조(self-referential) 프로그래밍\n# TestCase(\"testMethod\").run() 문자열을 전달하네??\n# 초반이 어려운데, 나중에 다시 읽어보기\n\nclass TestCase:\n    def __init__(self, name):\n        self.name = name\n\n    def run(self):\n        result = TestResult()\n        result.testStarted()\n        self.setUp()\n        try:\n            method = getattr(self, self.name)\n            method()\n        except:\n            result.testFailed()\n        self.tearDown()\n\n    def setUp(self):\n        pass\n\n    def tearDown(self):\n        pass\n\n\nclass WasRun(TestCase):\n    def __init__(self, name):\n        TestCase.__init__(self, name)\n\n    def testMethod(self):\n        self.log += \"testMethod \"\n\n    def setUp(self):\n        self.log = \"setUp \"\n\n    def tearDown(self):\n        self.log += \"tearDown \"\n\n    def testBrokenMethod(self):\n        raise Exception\n\n\nclass TestResult:\n    def __init__(self):\n        self.runCount = 0\n        self.failureCount = 0\n\n    def testStarted(self):\n        self.runCount += 1\n\n    def testFailed(self):\n        self.failureCount += 1\n\n    def summary(self):\n        return '%d run, %d failed' % (self.runCount, self.failureCount)\n\n\nclass TestSuite:\n    def __init__(self):\n        self.tests = []\n\n    def add(self, test):\n        self.tests.append(test)\n\n    def run(self, result):\n        result = TestResult()\n        for test in self.tests:\n            test.run(result)\n\n\nclass TestCaseTest(TestCase):\n\n    def testTemplateMethod(self):\n        test = WasRun(\"testMethod\")\n        test.run()\n        assert (test.log == \"setUp testMethod tearDown \")\n\n    def testResult(self):\n        test = WasRun(\"testMethod\")\n        result = test.run()\n        assert (\"1 run, 0 failed\" == result.summary())\n\n    def testFailedResult(self):\n        test = WasRun(\"testBrokenMethod\")\n        result = test.run()\n        assert (\"1 run, 1 failed\" == result.summary())\n\n    def testFailedResultFormatting(self):\n        result = TestResult()\n        result.testStarted()\n        result.testFailed()\n        assert (\"1 run, 1 failed\" == result.summary())\n\n    def testSuite(self):\n        suite = TestSuite()\n        suite.add(WasRun(\"testMethod\"))\n        suite.add(WasRun(\"testBrokenMethod\"))\n        result = TestResult()\n        suite.run(result)\n        assert (\"2 run, 1 failed\" == result.summary())\n\n\nTestCaseTest(\"testTemplateMethod\").run()\nTestCaseTest(\"testResult\").run()\nTestCaseTest(\"testFailedResult\").run()\nTestCaseTest(\"testFailedResultFormatting\").run()\nTestCaseTest(\"testSuite\").run()\n```\n\n스트레스를 받으면 테스트를 뜸하게 하고 그러면 스트레스를 더 받는다.\n\n각각의 테스트는 다른 테스트와 완전히 독립적이어야 한다. 문제가 하나면 테스트도 하나만 실패해야 한다. 테스트가 실행 순서에 독립적이게 된다. 이를 위한 작업은 응집도가 높고 결합도는 낮은 시스템을 만든다.\n","path":"book/test-driven-development/index.md"}