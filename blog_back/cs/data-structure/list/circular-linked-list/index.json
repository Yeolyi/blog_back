{"pathArr":[],"metaData":{"title":"원형 연결 리스트"},"content":"\nhead와 tail의 명확한 정의는 무엇일까?\n\n- tail에 추가하면 순회할 때 순서대로 되는 걸까?\n- tail인데 더미 노드를 사용한 구현을 하면 순서대로 될 수 없다. tail의 위치를 옮길 수 없기 때문.\n\n여기서는 더미가 무조건 좋지는 않은 것 같다. LNext에서 조건문이 생겨버림.\n\n```{class=\"language-c\"}\ntypedef struct _cLinkedList\n{\n    Node *head;\n    Node *cur;\n    Node *prev;\n    int size;\n} CLinkedList;\n\ntypedef CLinkedList List;\n\nvoid ListInit(List *plist)\n{\n    plist->head = malloc(sizeof(Node));\n    plist->head->next = plist->head;\n    plist->size = 0;\n}\n\nvoid LInsert(List *plist, LData data)\n{\n    Node *node = malloc(sizeof(Node));\n    node->data = data;\n    node->next = plist->head->next;\n    plist->head->next = node;\n}\n\nbool LFirst(List *plist, LData *data)\n{\n    if (plist->head->next == plist->head)\n        return false;\n    plist->cur = plist->head->next;\n    plist->prev = plist->head;\n    if (data)\n        *data = plist->cur->data;\n    return true;\n}\n\nvoid LNext(List *plist, LData *data)\n{\n    plist->prev = plist->cur;\n    plist->cur = plist->cur->next;\n    if (plist->cur == plist->head)\n    {\n        plist->prev = plist->cur;\n        plist->cur = plist->cur->next;\n    }\n    if (data)\n        *data = plist->cur->data;\n}\n\nvoid LRemove(List *plist)\n{\n    plist->prev->next = plist->cur->next;\n    free(plist->cur);\n    plist->cur = plist->prev;\n}\n\nint LCount(List *plist)\n{\n    return plist->size;\n}\n\nint main(void)\n{\n    int testDataSize = 7;\n    int xList[] = {3, 1, 4, 1, 5, 9, 2};\n    int yList[] = {6, 8, 3, 5, 8, 9, 7};\n    int level[] = {3, 2, 3, 8, 4, 6, 2};\n\n    Point *testData = malloc(sizeof(Point) * testDataSize);\n\n    for (int i = 0; i < testDataSize; i++)\n    {\n        testData[i].x = xList[i];\n        testData[i].y = yList[i];\n        testData[i].level = level[i];\n    }\n\n    List list;\n    Point data;\n    ListInit(&list);\n\n    for (int i = 0; i < testDataSize; i++)\n        LInsert(&list, testData[i]);\n\n    printf(\"Data Count: %d\\n\", LCount(&list));\n    if (LFirst(&list, &data))\n    {\n        PrintPoint(&data);\n        for (int i = 0; i < 10; i++)\n        {\n            LNext(&list, &data);\n            PrintPoint(&data);\n        }\n    }\n    puts(\"\");\n    if (LFirst(&list, &data))\n    {\n        if (data.level == 2)\n            LRemove(&list);\n        for (int i = 0; i < 10; i++)\n        {\n            LNext(&list, &data);\n            if (data.level == 2)\n                LRemove(&list);\n        }\n    }\n    if (LFirst(&list, &data))\n    {\n        PrintPoint(&data);\n        for (int i = 0; i < 10; i++)\n        {\n            LNext(&list, &data);\n            PrintPoint(&data);\n        }\n    }\n}\n```\n","path":"cs/data-structure/list/circular-linked-list/index.md"}