{"pathArr":[],"metaData":{"title":"양방향 연결 리스트"},"content":"\n더미 노드를 헤드에만 붙였는데, 두 개를 붙이면 LInsert 함수가 좀 더 간단해질 것같다.\n\n```{class=\"language-c\"}\ntypedef struct _Node\n{\n    LData data;\n    struct _Node *next;\n    struct _Node *prev;\n} Node;\n\ntypedef struct _DBLinkedList\n{\n    Node *head;\n    Node *cur;\n    int size;\n} DBLinkedList;\n\ntypedef DBLinkedList List;\n\nvoid LInit(List *plist)\n{\n    plist->head = malloc(sizeof(Node));\n    plist->head->next = NULL;\n    plist->head->prev = NULL;\n    plist->size = 0;\n}\n\nvoid LInsert(List *plist, LData data)\n{\n    Node *node = malloc(sizeof(Node));\n    node->data = data;\n    node->next = plist->head->next;\n    node->prev = plist->head;\n    if (plist->head->next)\n        plist->head->next->prev = node;\n    plist->head->next = node;\n    (plist->size)++;\n}\n\nbool LFirst(List *plist, LData *data)\n{\n    if (!(plist->head->next))\n        return false;\n    plist->cur = plist->head->next;\n    if (data)\n        *data = plist->cur->data;\n    return true;\n}\n\nbool LNext(List *plist, LData *data)\n{\n    if (!(plist->cur->next))\n        return false;\n    plist->cur = plist->cur->next;\n    if (data)\n        *data = plist->cur->data;\n    return true;\n}\n\nbool LPrev(List *plist, LData *data)\n{\n    if (plist->cur->prev == plist->head)\n        return false;\n    plist->cur = plist->cur->prev;\n    if (data)\n        *data = plist->cur->data;\n    return true;\n}\n\nint main()\n{\n    List list;\n    Point data;\n    LInit(&list);\n\n    for (int i = 1; i < 8; i++)\n    {\n        data.x = i;\n        data.y = i;\n        data.level = i;\n        LInsert(&list, data);\n    }\n    if (LFirst(&list, &data))\n    {\n        PrintPoint(&data);\n        while (LNext(&list, &data))\n            PrintPoint(&data);\n        while (LPrev(&list, &data))\n            PrintPoint(&data);\n    }\n    return 0;\n}\n```\n","path":"cs/data-structure/list/double-linked-list/index.md"}