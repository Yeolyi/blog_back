{"pathArr":[],"metaData":{"title":"Adding Interactivity"},"content":"\n> In React, data that changes over time is called state.\n\n### Responding to Events\n\nBy convention, it is common to name event handlers as **handle** followed by the event name.\n\n[Everything you need to know about Design Systems](https://uxdesign.cc/everything-you-need-to-know-about-design-systems-54b109851969)\n\nAll events propagate in React except onScroll, which only works on the JSX tag you attach it to.\n\n```jsx\ne.stopPropagation();\n```\n\n자식 요소의 이벤트를 잡고 싶으면...\n\n```jsx\n<div\n  onClickCapture={() => {\n    /* this runs first */\n  }}\n>\n  <button onClick={(e) => e.stopPropagation()} />\n  <button onClick={(e) => e.stopPropagation()} />\n</div>\n```\n\n1. 아래로 내려가며 모든 onClickCapture 호출\n2. 눌린 요소의 onClick 실행\n3. 위로 올라가며 모든 onClick 실행\n\nExplicitly calling an event handler prop from a child handler is a good alternative to propagation.\n\n```jsx\ne.preventDefault();\n```\n\n**Event handlers are the best place for side effects.** However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component’s memory. You will learn all about it on the next page.\n\n### State: A Component's Memory\n\n> React, this kind of component-specific memory is called **state**.\n\n1. Local variables don’t persist between renders.\n2. Changes to local variables won’t trigger renders.\n\n> Hooks are special functions that are only available while React is rendering.\n\nHooks are functions, but it’s helpful to think of them as unconditional declarations about your component’s needs. 모듈 상단에 import 하는 것과 비슷하게생각하자.\n\nHow does useState know which of the state variables to return?\n\n- Hooks rely on a stable call order on every render of the same component.\n- Internally, React holds an array of state pairs for every component.\n\n```html\n<body>\n  <button id=\"nextButton\">Next</button>\n  <h3 id=\"header\"></h3>\n  <button id=\"moreButton\"></button>\n  <p id=\"description\"></p>\n  <img id=\"image\" />\n</body>\n\n<style>\n  * {\n    box-sizing: border-box;\n  }\n\n  body {\n    font-family: sans-serif;\n    margin: 20px;\n    padding: 0;\n  }\n\n  button {\n    display: block;\n    margin-bottom: 10px;\n  }\n</style>\n```\n\n```js\nlet componentHooks = [];\nlet currentHookIndex = 0;\n\n// How useState works inside React (simplified).\nfunction useState(initialState) {\n  let pair = componentHooks[currentHookIndex];\n  if (pair) {\n    // This is not the first render,\n    // so the state pair already exists.\n    // Return it and prepare for next Hook call.\n    currentHookIndex++;\n    return pair;\n  }\n\n  // This is the first time we're rendering,\n  // so create a state pair and store it.\n  pair = [initialState, setState];\n\n  function setState(nextState) {\n    // When the user requests a state change,\n    // put the new value into the pair.\n    pair[0] = nextState;\n    updateDOM();\n  }\n\n  // Store the pair for future renders\n  // and prepare for the next Hook call.\n  componentHooks[currentHookIndex] = pair;\n  currentHookIndex++;\n  return pair;\n}\n\nfunction Gallery() {\n  // Each useState() call will get the next pair.\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  // This example doesn't use React, so\n  // return an output object instead of JSX.\n  return {\n    onNextClick: handleNextClick,\n    onMoreClick: handleMoreClick,\n    header: `${sculpture.name} by ${sculpture.artist}`,\n    counter: `${index + 1} of ${sculptureList.length}`,\n    more: `${showMore ? 'Hide' : 'Show'} details`,\n    description: showMore ? sculpture.description : null,\n    imageSrc: sculpture.url,\n    imageAlt: sculpture.alt,\n  };\n}\n\nfunction updateDOM() {\n  // Reset the current Hook index\n  // before rendering the component.\n  currentHookIndex = 0;\n  let output = Gallery();\n\n  // Update the DOM to match the output.\n  // This is the part React does for you.\n  nextButton.onclick = output.onNextClick;\n  header.textContent = output.header;\n  moreButton.onclick = output.onMoreClick;\n  moreButton.textContent = output.more;\n  image.src = output.imageSrc;\n  image.alt = output.imageAlt;\n  if (output.description !== null) {\n    description.textContent = output.description;\n    description.style.display = '';\n  } else {\n    description.style.display = 'none';\n  }\n}\n\nlet nextButton = document.getElementById('nextButton');\nlet header = document.getElementById('header');\nlet moreButton = document.getElementById('moreButton');\nlet description = document.getElementById('description');\nlet image = document.getElementById('image');\nlet sculptureList = [\n  {\n    name: 'Homenaje a la Neurocirugía',\n    artist: 'Marta Colvin Andrade',\n    description:\n      'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n    url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n    alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.',\n  },\n  {\n    name: 'Floralis Genérica',\n    artist: 'Eduardo Catalano',\n    description:\n      'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n    url: 'https://i.imgur.com/ZF6s192m.jpg',\n    alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.',\n  },\n  {\n    name: 'Eternal Presence',\n    artist: 'John Woodrow Wilson',\n    description:\n      'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n    url: 'https://i.imgur.com/aTtVpES.jpg',\n    alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.',\n  },\n  {\n    name: 'Moai',\n    artist: 'Unknown Artist',\n    description:\n      'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n    url: 'https://i.imgur.com/RCwLEoQm.jpg',\n    alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.',\n  },\n  {\n    name: 'Blue Nana',\n    artist: 'Niki de Saint Phalle',\n    description:\n      'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n    url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n    alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.',\n  },\n  {\n    name: 'Ultimate Form',\n    artist: 'Barbara Hepworth',\n    description:\n      'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n    url: 'https://i.imgur.com/2heNQDcm.jpg',\n    alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.',\n  },\n  {\n    name: 'Cavaliere',\n    artist: 'Lamidi Olonade Fakeye',\n    description:\n      \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n    url: 'https://i.imgur.com/wIdGuZwm.png',\n    alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.',\n  },\n  {\n    name: 'Big Bellies',\n    artist: 'Alina Szapocznikow',\n    description:\n      'Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.',\n    url: 'https://i.imgur.com/AlHTAdDm.jpg',\n    alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.',\n  },\n  {\n    name: 'Terracotta Army',\n    artist: 'Unknown Artist',\n    description:\n      'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n    url: 'https://i.imgur.com/HMFmH6m.jpg',\n    alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.',\n  },\n  {\n    name: 'Lunar Landscape',\n    artist: 'Louise Nevelson',\n    description:\n      'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n    url: 'https://i.imgur.com/rN7hY6om.jpg',\n    alt: 'A black matte sculpture where the individual elements are initially indistinguishable.',\n  },\n  {\n    name: 'Aureole',\n    artist: 'Ranjani Shettar',\n    description:\n      'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n    url: 'https://i.imgur.com/okTpbHhm.jpg',\n    alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.',\n  },\n  {\n    name: 'Hippos',\n    artist: 'Taipei Zoo',\n    description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n    url: 'https://i.imgur.com/6o5Vuyu.jpg',\n    alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.',\n  },\n];\n\n// Make UI match the initial state.\nupdateDOM();\n```\n\nState is local to a component instance on the screen.\n\nUnlike props, state is fully private to the component declaring it. The parent component can’t change it.\n\nWhat if you wanted both galleries to keep their states in sync? The right way to do it in React is to remove state from child components and add it to their closest shared parent.\n\nhook into = to become connected to\n\n배열 역방향 순회에서 -1 % arr.length 하면 몇이 나오지?\n\n### Render and Commit\n\n**Trigger a render**\n\ninitial render와 state update가 렌더의 두 이유이다.\n\ninitial render는 ReactDOM.render로 이루어진다.\n\n컴포넌트의 state가 바뀌면 queues a render.\n\n**React renders your components**\n\n렌더가 트리거된 이후 리액트는 컴포넌트를 호출해 화면에 무엇을 보여줄지 알아본다.\n\n> “Rendering” is React calling your components.\n\n초기 렌더에서는 root 컴포넌트를 호출하고, 이후에는 state 업데이트로 렌더가 트리거된 컴포넌트를 호출한다.\n\n초기 렌더에서는 DOM node들을 만들고, re-render에서는 이전 렌더와 비교 작업을 해어떤 프로퍼티가 바뀌었는지 계산한다. commit phrase 전까지는 이 정보로 아무 작업도 하지 않는다.\n\n**React commits changes to the DOM**\n\n초기 렌더에서는 appendChild로 모든 DOM 노드들을 넣고, 이후에는 렌더링 단계에서계산된 minimum neccessary operation을 수행한다.\n\n### State as a Snapshot\n\nSetting state variable does not change the state variable you already have, but instead triggers a re-render.\n\nWhen React re-renders a component:\n\n1. React calls your function again.\n2. Your function returns a new JSX snapshot.\n3. React then updates the screen to match the snapshot you’ve returned.\n\nState actually lives outside of your function.\n\nWhen React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!\n\n```jsx\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      // Scheduled using a snapshot of the state at the time the user interacted with it\n      <button\n        onClick={() => {\n          setNumber(number + 5);\n          setTimeout(() => {\n            alert(number);\n          }, 3000);\n        }}\n      >\n        +5\n      </button>\n    </>\n  );\n}\n```\n\nReact keeps the state values “fixed” within one render’s event handlers.\n\nVariables and event handlers don’t “survive” re-renders. Every render has its own event handlers.\n\n- Event handlers created in the past have the state values from the render in which they were created.\n\nYou can mentally substitute state in event handlers, similarly to how you think about the rendered JSX???\n\n### Queueing a Series of State Updates\n\nReact waits until all code in the event handlers has run before processing your state updates.\n\n```jsx\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n  console.log('asdasd');\n  return (\n    <>\n      <h1>{number}</h1>\n      <button\n        onClick={() => {\n          setNumber(number + 1);\n          setTimeout(() => {\n            setNumber(100);\n          }, 2000);\n        }}\n      >\n        +3\n      </button>\n    </>\n  );\n}\n// 콜백까지 기다리는건 아니니까,,,?\n// 암튼 setNumer는 계속 유효하구나\n```\n\nReact does not batch across multiple intentional events like clicks.\n\n```jsx\nimport { useState } from 'react';\n\nexport default function Counter() {\n  const [number, setNumber] = useState(0);\n\n  return (\n    <>\n      <h1>{number}</h1>\n      <button\n        onClick={() => {\n          // pass updater function\n          setNumber((n) => n + 1);\n          setNumber((n) => n + 1);\n          setNumber((n) => n + 1);\n        }}\n      >\n        +3\n      </button>\n    </>\n  );\n}\n// It is a way to tell React to “do something with the state value” instead of just replacing it.\n```\n\nIt’s common to name the updater function argument by the first letters of the corresponding state variable:\n\n```jsx\nsetLastName((ln) => ln.reverse());\n```\n\n```jsx\nimport { useState } from 'react';\n\nexport default function RequestTracker() {\n  const [pending, setPending] = useState(0);\n  const [completed, setCompleted] = useState(0);\n\n  async function handleClick() {\n    setPending((p) => p + 1);\n    await delay(3000);\n    setPending((p) => p - 1);\n    // 그 순간의 값으로 설정하려면 함수로 건네줘야한다.\n    // c+1을 전달하면 이벤트 헨들러 호출될 당시의 c값으로 하는 듯.\n    setCompleted((c) => c + 1);\n  }\n\n  return (\n    <>\n      <h3>Pending: {pending}</h3>\n      <h3>Completed: {completed}</h3>\n      <button onClick={handleClick}>Buy</button>\n    </>\n  );\n}\n\nfunction delay(ms) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n```\n\n### Updating Objects in State\n\nAlthough objects in React state are technically mutable, you should treat them as if they were immutable\n\nNote that the ... spread syntax is “shallow”—it only copies things one level deep.\n\n```jsx\nsetPerson({\n  ...person,\n  [e.target.name]: e.target.value,\n  // 여러 필드에 동일한 이벤트 핸들러 사용하기.\n  // Dynamic name의 활용\n  // e.target.name은 <input>의 name 프로퍼티\n});\n```\n\nNested object를 할 때는 잘 분리해서 하기. Objects are not really nested. 다른 객체를 가르킬 뿐.\n\n**Immer** is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. The draft provided by Immer is a special type of object, called a Proxy, that “records” what you do with it. 프록시 공부해보자.\n\n### Updating Arrays in State\n\nIn general, you should only mutate objects that you have just created.\n","path":"frontend/react/adding-interactivity/index.md"}