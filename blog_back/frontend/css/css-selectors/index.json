{"pathArr":[],"metaData":{"title":"CSS selectors"},"content":"\n### Type of selectors\n\nType, class, and ID selectors\n\n```css\n/* Attribute selector */\na[href=\"https://example.com\"]\n{\n}\n```\n\nPseudo-classes selector style certain states of an element. Pseudo-elements selector select a certain part of an element rather than the element itself. Combinators combine other selectors in order to target elements within our documents.\n\nThe universal selector\n\n```css\n/* Bad */\narticle :first-child {\n  font-weight: bold;\n}\n/* Good */\narticle *:first-child {\n  font-weight: bold;\n}\n```\n\n```html\n<style>\n  /* 띄어쓰기 있으면 안됨 */\n  span.highlight {\n    background-color: yellow;\n  }\n  h1.highlight {\n    background-color: pink;\n  }\n</style>\n\n<body>\n  <h1 class=\"highlight\">Class selectors</h1>\n  <p>\n    Veggies es bonus vobis, proinde vos postulo essum magis\n    <span class=\"highlight\">kohlrabi welsh onion</span> daikon amaranth tatsoi tomatillo melon azuki\n    bean garlic.\n  </p>\n\n  <p class=\"highlight\">\n    Gumbo beet greens corn soko <strong>endive</strong> gumbo gourd. Parsley shallot courgette\n    tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber\n    earthnut pea peanut soko zucchini.\n  </p>\n</body>\n```\n\nIn most cases, it is preferable to add a class to an element instead of an ID.\n\nPseudo-classes enable you to target an element when it's in a particular state, as if you had added a class for that state to the DOM. Pseudo-elements act as if you had added a whole new element to the DOM, and enable you to style that.\n\n```css\n/* Combining pseudo-classes and pseudo-elements */\narticle p:first-child::first-line {\n  font-size: 120%;\n  font-weight: bold;\n}\n```\n\n### Combinators\n\nThe child combinator (>) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the direct children of elements matched by the first. Descendant elements further down the hierarchy don't match.\n\nThe adjacent sibling selector (+) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the next sibling element of the first selector.\n\nIf you want to select siblings of an element even if they are not directly adjacent, then you can use the general sibling combinator (~).\n","path":"frontend/css/css-selectors/index.md"}