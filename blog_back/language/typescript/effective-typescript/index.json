{"pathArr":[],"metaData":{"title":"Effective Typescript"},"content":"\n> Effective TypeScript by Dan Vanderkam, published by O'Reilly Media.\n\n> ‘This book is not just about what TypeScript can do—it teaches why each language feature is useful, and where to apply patterns to get the greatest effect’ Jesse Hallett, Senior Software Enginner, Originate, Inc.\n\n[https://effectivetypescript.com](https://effectivetypescript.com)\n\n## Preface\n\nTypeScript is more than just a type system. It also brings a whole shite of language services which are fast and easy to use.\n\n## 1. Getting to Know TypeScript\n\n타입스크립트는 다른 컴파일러나 인터프리터와는 다르게 또다른 고수준 언어로 컴파일한다.\n\n### 1. TS와 JS의 관계 이해하기\n\n문법적인 측면에서 TS는 JS의 상위 집합이다.\n\nTS가 static 타입 시스템이라는 것은 코드를 실행하지 않고도 런타임에 예외를 던질코드를 찾아낼 수 있다는 것이다. 이것이 TS 타입 시스템의 목표이다.\n\nType annotation은 TS에게 개발자의 의도를 전달한다.\n\n타입 시스템은 JS의 런타임 행동을 모델링한다. [] + 12 같은 경우는 goes beyond simply modeling the runtime behavior.\n\n정적 타입의 안정성을 보장할 수 있는 타입 시스템을 sound하다고 한다. TS는 sound하지는 않다.\n\n### 2. 사용하고 있는 TS 옵션 알기\n\nConfiguration 파일을 선호하라.\n\nnoImplicitAny와 strictNullCheck가 가장 중요하다.\n\nTS는 strict 옵션을 통해 거의 모든 에러를 잡아낼 수 있다.\n\n### 3. 코드 생성이 타입과 무관함을 이해하기\n\n타입스크립트는 크게 transpiling과 type error 체크 두가지 일을 한다. 각각은 서로전혀 간섭하지 않는다. 코드의 타입은 생성되는 JS 파일에 영향을 끼치지 않는다.\n\n따라서 컴파일이 안됐다는 표현보다 doesn't type check(타입이 옳지 않다?)라는 표현을 사용해야 한다.\n\n> You should aim for zero erros when you commit code, lest you fall into trap of having to remember what is an expected or unexpected error.\n\n**런타임에 TS 타입 체크는 할 수 없다**\n\n```ts\ninterface Square {\n  width: number;\n}\ninterface Rectangle extends Square {\n  height: number;\n}\ntype Shape = Square | Rectangle;\n\nfunction calculateArea(shape: Shape) {\n  // 'Rectangle' only refers to a type, but is being used as a value here.\n  // if (shape instanceof Rectangle) {\n  // }\n  if ('height' in shape) {\n    shape; // type: Rectangle\n  }\n  // 아니면 kind: 'square'처럼 태그를 넣어놓는 것도 방법.\n  // 이때 Shape는 tagged union이 된다. TS에서 널리 사용됨.\n}\n```\n\n값은 내가 선언한 타입 이외에 다른 타입도 가질 수 있다.\n\n### 4. Structural Typing에 익숙해지기\n\nJS는 기본적으로 duck typed. 오리처럼 걷고 말하면 오리임.\n\nstructural type system / nominative system. TS는 전자.\n\n!@chapter1/structuralType.ts\n\n클래스도 structural typing rule을 따르기에 아래와 같은 경우가 생길 수도 있다.\n\n```ts\nclass C {\n  foo: string;\n  constructor(foo: string) {\n    this.foo = foo;\n  }\n}\nconst d: C = { foo: 'object literal' }; // 가능\n// Object.prototype에서 온 constructor가 존재한다.\n```\n\n### 5. any 타입의 사용 제한하기\n\nany는 TS의 많은 장점을 없앤다.\n\n## 2. TypeScript's Type System\n\nnuts and bolds of TS's type system.\n\n### 6. 타입 시스템의 탐색과 interrogate를 위해 에디터 사용하기\n\nTypeScript에는 두가지 executables가 있다. tsc는 컴파일러, tsserver는 TS standalone server. 서버 또한 language service를 제공하기에 매우 중요하며 에디터를 통해 해당 서비스를 사용하게 된다. 'Go to Definition'도 이 서비스가 제공해줌.\n\n### 7. 타입을 값들의 집합으로 보기\n\n> 가장 작은 집합은 어떤 값도 없는 공집합이다. 이는 never 타입에 대입된다. Domain 이 비어있기 때문에어떤 값도 이 타입을 가지는 변수에 대입할 수 없다.\n\nTS에서 assignable하다는 것은 value가 type의 요소거나, type이 type의 부분집합임을의미한다.\n\n타입 연산은 값들의 집합에 적용되지, 인터페이스의 프로퍼티에 적용되는 것이 아니다 . 따라서 아래가 성립한다.\n\n```ts\ninterface Person {\n  name: string;\n}\ninterface Lifespan {\n  birth: Date;\n  death?: Date;\n}\ntype PersonSpan = Person & Lifespan;\n\nconst ps: PersonSpan = {\n  name: 'Yeolyi',\n  birth: new Date(),\n  death: new Date(),\n}; // OK\n\ntype K = keyof (Person | Lifespan); // never\n\nconst list = [1, 2];\n// const tuple: [number, number] = list;\n// list의 타입인 number[]에는 [number, number]가 아닌 것들도 있다.\n\nconst triple: [number, number, number] = [1, 2, 3];\n// const double: [number, number] = triple;\n// Source has 3 element(s) but target allows only 2.\n// 책이랑 에러 메시지가 다르네?\n// 책은 Types of property 'length' are incompatible\n\n// 타입스크립트는 튜플을 { 0: number, 1: number, length: 2}\n// 으로 모델링한다.\n\ntype NonZeroNums = Exclude<number, 0>; // type: number\nconst zero: NonZeroNums = 0; // 되네???\n// https://stackoverflow.com/questions/68008673/typescript-any-number-except-x\n```\n\n```ts\nkeyof (A&B) = (keyof A) | (keyof B)\nkeyof (A|B) = (keyof A) & (keyof B)\n```\n\n> extends는 assignable to 와 마찬가지로 부분집합 개념으로 해석할 수 있다.\n\n> Think of “extends,” “assignable to,” and “subtype of” as synonyms for “subset of.\n\n### 8. 심벌이 타입 공간에 있는지 값 공간에 있는지 알기\n\nType space / Value space\n\n이름은 같아도 속한 공간에 따라 다른 것을 지칭할 수도 있다.\n\n```ts\ninterface Cylinder {\n  radius: number;\n  height: number;\n}\nconst Cylinder = (radius: number, height: number) => ({ radius, height });\n\nif (shape instanceof Cylinder) {\n  shape.radius;\n  // Property 'radius' does not exist on type '{}'\n}\n```\n\nYou can go between the constructor type and the instance type using the InstanceType generic??\n\n```ts\ntype C = InstanceType<typeof Cylinder>;\n```\n\n위 예제에서 Cylinder는 class로 선언되었어야 한다. 클래스와 열거형은 타입과 값 모두를 가진다. The TypeScript type introduced by a class is based on its shape (its properties and methods) while **the value is the constructor**.\n\nInstanceType이 constructor의 타입을 사용해서 그냥 Cylinder는 안되고 typeof Cylinder를 사용해서 값 타입의 Cylinder 즉 constructor의 타입을 사용해야되는건가.\n\n**typeof는 항상 값에서 작동한다**\n\n\"foo\"는 문자열 리터럴일 수도, 문자열 리터럴 타입일 수도 있다.\n\n### 9. 타입 assertion보다 타입 선언을 선호하기\n\n```ts\nconst people = ['alice', 'bob', 'jan'].map((name): Person => ({ name }));\n// 물론 people에 달 수도 있지만 체인이 있으면 이 방법을 사용해야함.\n```\n\nType assertions make the most sense when you truly do know more about a type than TypeScript does, typically from context that isn’t available to the type checker.\n\nType assertion은 두 타입간에 교집합이 있어야 가능하다. unknown은 모든 타입의 subtype이므로 as unknown as A로 하는 escape hatch가 있다.\n\n### 10. Wrapper Type 기피하기(String, Number...)\n\n래퍼 타입을 직접 인스턴스화할 이유는 없다. new 없이 BigInt와 Symbol을 사용하는것은 어차피 primitive 를 뱉으므로 괜찮다.\n\n### 11. Excess Property Checking의 한계 알기\n\nObject literal을 사용할 때는 알려지지 않은 프로퍼티를 제한한다.\n\nRecognizing excess property checking as a distinct process will help you build a clearer mental model of TypeScript’s type system.\n\n```ts\ninterface Options {\n  title: string;\n  darkMode?: boolean;\n}\n\nfunction createWindow(options: Options) {}\ncreateWindow({\n  title: 'Hello',\n  darkmode: false, // Object literal may only specify known properties\n});\n```\n\n순수한 structural type checker는 위와 같은 실수를 찾아내지 못한다.\n\n다만 다른 변수에 담고 전달하거나 type assertion을 사용했으면 동작하지 못한다.\n\n프로퍼티가 다 weak(? 붙은건가)한 객체는 거기서 적어도 하나는 가지고 있는지를 확인하는 단계가 추가된다.\n\n객체 리터럴에만 적용된다는 점 주의.\n\n### 12. 가능한 경우 함수 표현식 전체에 타입을 적용하기\n\nConsider applying type annotations to entire function expressions, rather than to their parameters and return type.\n\n```ts\ntype DiceRollFn = (sides: number) => number;\nconst rollDice: DiceRollFn = (sides) => {};\n```\n\n반복을 줄일 수 있다. 타입 표시와 로직을 분리할 수 있다.\n\n```ts\nconst checkedFetch: typeof fetch = async (input, init) => {\n  const reponse = await fetch(input, init);\n  if (!reponse.ok) {\n    throw new Error('Request failed: ' + response.status);\n  }\n  return reponse;\n};\n```\n\n### 13. 타입과 인터페이스의 차이 알기\n\n```ts\n// interface로 함수를 정의할 수 있다.\n// 좀 이상해보여도 함수도 객체인걸 생각하면 괜찮다.\ninterface IFn {\n  (x: number): string;\n}\n```\n\n인터페이스는 union 타입같은 complex type은 extend할 수 없다.\n\nunion interface는 없다.\n\ntype이 더 gerenral하고 capable하다. 튜플 타입을 만들기에도 쉽다.\n\n```ts\ntype Pair = [number, number];\ninterface Tuple {\n  0: number;\n  1: number;\n  length: 2;\n  // 하지만 concat같은 tuple method가 전부 사라진다.\n  // type 쓰는게 나음\n}\n```\n\n다만, 인터페이스는 augmented될 수 있다. delcaration merging. 누구도 내 타입을 augment할 수 없게 하려면 type을 쓰면 된다.\n\n복잡한 타입에는 선택지 없이 type을 사용하고, 이외의 경우 기존 코드와 통일성있게작성하고 혹시 다른 유저에 의해 확장이되어야하면 interface를 사용한다.\n\n### 14. 반복을 막기 위해 타입 연산과 제너릭을 사용하기\n\nDRY principle: don’t repeat yourself. It’s the closest thing to universal advice that you’ll find in software development.\n\n타입에서의 반복도 막아야한다.\n\n```ts\ninterface State {\n  userId: string;\n  pageTitle: string;\n  pageContents: string;\n}\n\ninterface TopNavState {\n  userId: string;\n  pageTitle: string;\n}\n\n// TopNavState로 State를 만들지 말고, 반배 방향으로 해서 단일한 인터페이스가 전체 앱의 state를 정의할 수 있도록 한다.\ntype TopNavState2 = {\n  [k in 'userId' | 'pageTitle']: State[k];\n};\n\n// 이런게 너무 흔해서 표준 라이브러리에 따로 있음.\ntype TopNavState3 = Pick<State, 'userId' | 'pageTitle'>;\n```\n\n```ts\ninterface SaveAction {\n  type: 'save';\n}\ninterface LoadAction {\n  type: 'load';\n}\ntype Action = SaveAction | LoadAction;\ntype ActionType = Action['type']; // \"save | load\"\n```\n\n'typeof 값'을 써도 좋지만 보통은 타입을 먼저 선언하고 이에 맞게 값을 할당하는 것이 좋다.\n\n> Note that ReturnType operates on typeof getUserInfo, the function’s type, rather than getUserInfo, the function’s value. As with typeof, use this technique judiciously. Don’t get mixed up about your source of truth.\n\n로직의 DRY를 위해 함수를 사용하고, 타입의 DRY를 위해 제너릭을 사용한다. 제너릭은타입의 DRY를 위한 핵심이다. 값을 한정하기 위해 타입을 사용하고, 타입을 한정하기위해 extends를 사용한다.\n\n### 15. 동적인 데이터에 index signature 사용하기\n\n```ts\ntype Rocket = { [property: string]: string };\n```\n\n키의 이름, 키의 타입, 값의 타입으로 구성된다. 키의 이름은 문서화 목적 외에는 타입 체커에게 사용되지않는다.\n\nIndex signature는 부정확하고, 보통 더 나은 대안이 있다.\n\nTruly dynamic data에 보통 사용된다. 런타임까지는 정확한 값을 알 수 없는 경우. 더안전하게 하려면 undefined를 사용하자. 반환값이 string | undefined인 느낌.\n\nRecord나 Mapped type을 사용하는 대안도 있다.\n\n```ts\ntype Vec3D = Record<'x' | 'y' | 'z', number>;\ntype ABC = { [k in 'a' | 'b' | 'c']: k extends 'b' ? string : number };\n```\n\n### 16. Index Signature보다 배열, 튜플 선호하기\n\n배열도 객체이고 number 타입의 키값으로 접근하지만 실제로는 문자열로 변환되어 사용된다.\n\nTS에서는 숫자키와 문자키를 구분하지만 실제로는 그렇지 않음을 유념하자.\n\nfor...in보다 for...of나 forEach, for(;;)를 선호하자. for-in이 훨씬 느리다고 함.\n\n숫자로 인덱싱되는 자료구조가 필요하면 배열이나 튜플을 사용하자.\n\n### 17. mutation관련 에러를 막기 위해 readonly 사용하기\n\n함수에 건네준 패러미터가 바뀌지 않는다는 확신을 위해 readonly를 사용할 수 있다.\n\nnumber[]는 readonly number[]의 서브타입이다.\n\nreadonly는 전염성있다.\n\n```ts\n// 변수가 가리키는 배열은 바뀔 수 있으나 배열 자체는 바뀔 수 없다.\nlet currPara: readonly string[] = [];\n```\n\nreadonly is shallow.\n\n### 18. 값들을 sync하기 위해 Mapped Type 사용하기\n\nfail closed / fail open\n\n```ts\n// display 관련에는 리렌더링이 필요하지만 onClick이 달라졌을때는 필요하지 않다.\n// 이러한 최적화는 React component에서는 흔함\ninterface ScatterProps {\n  xs: number[];\n  ys: number[];\n  onClick: (x: number, y: number) => void;\n}\n\n// fail closed, 보수적 접근\n// 추가된 프로퍼티에 대해서는 무조건 업데이트 필요\nfunction shouldUpdate(oldProps: ScatterProps, newProps: ScatterProps) {\n  let k: keyof ScatterProps;\n  for (k in oldProps) {\n    if (oldProps[k] !== newProps[k]) {\n      if (k !== 'onClick') return true;\n    }\n  }\n  return false;\n}\n\n// fail open\n// 'do no harm' 원칙에 어긋남.\nfunction shouldUpdate2(oldProps: ScatterProps, newProps: ScatterProps) {\n  return (\n    oldProps.xs !== newProps.xs || oldProps.ys !== newProps.ys\n    // (no check for onClick)\n  );\n}\n\n// mapped type\nconst REQUIRES_UPDATE: { [k in keyof ScatterProps]: boolean } = {\n  xs: true,\n  ys: true,\n  onClick: false,\n};\n\nfunction shouldUpdate3(oldProps: ScatterProps, newProps: ScatterProps) {\n  let k: keyof ScatterProps;\n  for (k in oldProps) {\n    if (oldProps[k] !== newProps[k] && REQUIRES_UPDATE[k]) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n## 3. Type Inference\n\n> An experienced TypeScript developer will use relatively few annotations (but use them to great effect), while a beginner may drown their code in redundant type annotations.\n\n### 19. 추론 가능한 타입으로 코드 어지럽히지 않기\n\n이상적인 TS 코드는 함수/메소드 signiture의 타입은 명시하고, 함수 몸체의 지역 변수에는 생략하여 노이즈를 최소화하고 읽는 사람이 구현 로직에 집중할 수 있게 한다.\n\n객체 리터럴로 초기화 하는 경우에는 명시해도 좋다. excess property checking.\n\n**함수 구현 이전에 함수의 signiture을 명확히 알고 있어야 한다.** TDD와도 유사.\n\n객체 리터럴과 함수 반환값에 대해서는 추론 가능해도 타입을 명시하는 것을 고려해보기.\n\n### 20. 다른 타입이면 다른 변수 사용하기.\n\nunion 타입은 미래에 문제를 일으킬 수 있다(create more issues down the road). 타입 체크가 필요하므로다루기 어렵다.\n\nunion타입에서 서로 다른 두 변수로 나누면,\n\n- 엮인 두 개념을 분리하고,\n- 더 자세한 변수 이름을 쓸 수 있으며,\n- 타입 명시가 필요 없고 타입 추론을 개선한다.\n- 더 간단한 타입을 사용하게 되며\n- const로 변수를 선언할 수 있어진다.\n\ntype-chainging 변수를 기피하라.\n\n### 21. 타입 확장 이해하기\n\nlet으로 변수를 선언하면 TS는 여러 선택지들 중 적당한 타입을 선택한다. const로 선언하면 더 좁은 타입이 된다.\n\nTypeScript is trying to strike a balance between specificity and flexibility.\n\n값 뒤에 as const를 쓰면 타입스크립트는 가능한 좁은 타입으로 추론한다.\n\n### 22. 타입 축소 이해하기\n\n```ts\nconst jackson5 = ['Jackie', 'Tito', 'Jermaine', 'Marlon', 'Michael'];\n// (string | undefined)[]\nconst members = ['Janet', 'Michael']\n  .map((who) => jackson5.find((n) => n === who))\n  .filter((who) => who !== undefined);\n\nfunction isDefined<T>(x: T | undefined): x is T {\n  return x !== undefined;\n}\n\n// string[]\nconst members2 = ['Janet', 'Michael']\n  .map((who) => jackson5.find((n) => n === who))\n  .filter(isDefined);\n```\n\n### 23. 객체 한번에 생성하기\n\nspread operator를 활용\n\n```ts\nconst pt = { x: 3, y: 4 };\nconst id = { name: 'Pythagoras' };\n\n// const namedPoint = {};\n// Object.assign(namedPoint, pt, id);\n// namedPoint.name\n// -> Property 'name' does not exist on type '{}'\n\nconst namedPoint = { ...pt, ...id };\nnamedPoint.name;\n```\n\n### 24. alias 일관적으로 사용하기\n\n```ts\nconst borough = { name: 'Brooklyn', location: [40.688, -73.979] };\nconst loc = borough.location;\n```\n\n변수에 새로운 이름을 부여해는 것을 alias라고 한다. control flow 분석을 어렵게 하기 때문에 alias는 컴파일러 개발자에게 재앙이다.\n\n같은 값을 담은 변수가 여러개 있으면 TS의 타입 체킹에서도 실수가 발생할 수 있다. If you introduce an alias, use it consistently.\n\nconst bbox = polygon.box; 보다는 const {box} = polygon;을 선호하자.\n\n```ts\ntype Obj = { a: number | null };\nfunction fn(p: Obj) {\n  p.a = null;\n}\n\nconst obj: Obj = { a: 1 };\nif (obj.a) {\n  fn(obj);\n  obj.a; // 타입은 여전히 number로 뜬다.\n}\n\n// TS makes the pragmatic choice to assume the function does not invalidate its type refinements.\n// 그러지 않았다면 함수 호출할 때마다 타입 체크를 다시 해야됨.\n```\n\n### 25. 콜백보다 async 함수 사용하기\n\n콜백 방식에서 실행 순서는 코드 순서의 정반대이다.\n\n```ts\n// never 사용 예시\nfunction timeout(millis: number): Promise<never> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => reject('timeout'), millis);\n  });\n}\n// Promise.race 사용 예시\nasync function fetchWithTimeout(url: string, ms: number) {\n  return Promise.race([fetch(url), timeout(ms)]);\n}\n```\n\n함수는 sync하게 동작하거나 async하게 동작하거나 둘 중 하나만 해야한다. Promise.resolve가 이를 도움.\n\n```ts\ndeclare const fetchURL: (url: string, callback: (text: string) => void) => void;\nconst _cache: { [url: string]: string } = {};\n\nfunction fetchWithCache(url: string, callback: (text: string) => void) {\n  if (url in _cache) {\n    callback(_cache[url]); // url이 string인데 undefined가 나오지는 않네??\n  } else {\n    fetchURL(url, (text) => {\n      _cache[url] = text;\n      callback(text);\n    });\n  }\n}\n\nlet requestStatus: 'loading' | 'success' | 'error'; // 할당 없이 이렇게도 되네?\n// 캐싱 유무에 따라 결과가 달라짐. 캐싱안됐으면 success, 됐으면 success -> loading\nfunction getUser(userId: string) {\n  fetchWithCache(`/user${userId}`, (profile) => {\n    requestStatus = 'success';\n  });\n  requestStatus = 'loading';\n}\n```\n\nPromise나 callback에서는 위와 같은 짓을 하기 쉽지만 async/await에서는 어렵다.\n\n### 26. 타입 추론에 맥락이 어떻게 활용되는지 알기\n\n타입스크립트는 변수가 처음 도입(introduce)?될 때 그 타입을 결정한다.\n\n원하는 타입이 아니라면 타입 선언을 하거나 const context를 통해 shallow constant가 아닌 deep constant 임을 알리면 된다.\n\nconst contexts can neatly solve issues around losing context in inference, but they do have an unfortunate downside: if you make a mistake in the definition (say you add a third element to the tuple) then the error will be flagged at the call site, not at the definition. This may be confusing, especially if the error occurs in a deeply nested object??\n\n### 27. 타입의 흐름을 돕지 위해 Functional Construct나 라이브러리 사용하기\n\nhand-rolled loop는 타입을 직접 다루어야한다.\n\n```ts\nimport _ from 'lodash';\n\nconst csvData = '...';\nconst rawRows = csvData.split('\\n');\nconst headers = rawRows[0].split(',');\n\nconst rows = rawRows.slice(1).map((rowStr) => {\n  const row = {};\n  rowStr.split(',').forEach((val, j) => {\n    row[headers[j]] = val;\n    // ~No index signature with a parameter of type 'string' was found on type '{}'\n  });\n  return row;\n});\n\nconst rows2 = rawRows.slice(1).map((rowStr) => _.zipObject(headers, rowStr.split(',')));\n\n// @ts-ignore\nconst bestPaid = _(allPlayers)\n  .groupBy((player) => player.team)\n  .mapValues((players) => _.maxBy(players, (p) => p.salary)!)\n  .values()\n  .sortBy((p) => -p.salary)\n  .value(); // Type is BasketballPlayer[]\n\n// chain을 통해 _.a(_.b(v))가 아닌 _(v).a().b()처럼 사용할 수 있다.\n```\n\ntype flow를 개선하고, 가독성을 개선하고, 타입 명시의 필요성을 낮출 수 있다.\n\n## 4. Type Design\n\n> Show me your flowcharts and conceal your tables, and I shall continue to be mystified. Show me your tables, and I won’t usually need your flowcharts; they’ll be obvious. Fred Brooks, The Mythical Man Month\n\n데이터나 데이터 타입을 모르면 코드를 이해하기 어렵다. 타입을 잘 짜면 flowchart가 명확해진다.\n\n타입을 어떻게 디자인할지 이 챕터에서 살펴보자.\n\n### 28. 항상 유효한 상태를 나타내는 타입을 선호하기\n\n효과적인 타입 디자인의 열쇠는 유효한 상태만 표현할 수 있도록 타입을 설계하는 것이다.\n\n표현하기 길고 어려울 수록 결국에는 시간과 고통을 절약해준다.\n\n### 29. 넓게 수용하고 엄격하게 생산하기\n\n함수가 넓은 범위의 값을 입력으로 받는 것은 좋지만, 일반적으로 받은 것보다 상세한 것을 반환해야한다.\n\n반환값에 optional 프로퍼티와 union type이 많은 함수는 사용하기 어렵다.\n\n### 30. 문서에 타입 정보 반복하지 않기\n\n코드와 주석이 일치하지 않으면 둘 다 틀렸다~!\n\n강제하지 않으면 그 어떤 것도 sync되지 않는다.\n\n단위가 중요하고 타입만으로 충분하지 않다면 변수명에 포함시키자(temperatorC, timeMs...).\n\n### 31. null값을 타입 주변에 씌우기\n\nundefined가 많은 객체는 클라이언트가 사용하기 힘들다.\n\n```ts\n// 혼란스럽고 null 체크 범벅이 된다.\nclass UserPosts {\n  user: UserInfo | null;\n  posts: Post[] | null;\n\n  constructor() {\n    this.user = null;\n    this.posts = null;\n  }\n\n  async init(userId: string) {\n    return Promise.all([\n      async () => (this.user = await fetchUser(userId)),\n      async () => (this.posts = await fetchPostsForUser(userId)),\n    ]);\n  }\n\n  getUserName() {\n    // ...?\n  }\n}\n\n// nullable 프로퍼티를 프로미스로 바꾸지는 말자. 모든 메서드가 비동기임이 강제됨.\n// 프로미스는 데이터를 로드하는 코드는 명확하게 하지만 데이터를 사용하는 코드에는 정반대의 영향을 끼침\nclass UserPosts {\n  user: UserInfo;\n  posts: Post[];\n\n  constructor(user: UserInfo, posts: Post[]) {\n    this.user = user;\n    this.posts = posts;\n  }\n\n  static async init(userId: string): Promise<UserPosts> {\n    const [user, posts] = await Promise.all([fetchUser(userId), fetchPostsForUser(userId)]);\n    return new UserPosts(user, posts);\n  }\n\n  getUserName() {\n    return this.user.name;\n  }\n}\n```\n\n특정 값의 null 여부가 암묵적으로 다른 값의 상태에 달려있는 디자인을 피하자.\n\n모든 값이 사용 가능해지면 non-null 클래스를 만드는 것을 고려해보자.\n\n### 32. Union들의 인터페이스보다 인터페이스의 union을 선호하기\n\nTS의 타입 체커와 잘 어울려서 tagged union은 널리 사용된다.\n\nunion 타입인 프로퍼티를 여러개 가지는 인터페이스는 각각 프로퍼티간의 관계를 흐릿하게 하기에 보통은잘못 디자인된 것이다.\n\n### 33. string 타입보다 상세한 대안 찾기\n\n```ts\nfunction pluck<T>(record: T[], key: keyof T) {\n  return record.map((x) => x[key]);\n}\n\nfunction betterPluck<T, K extends keyof T>(record: T[], key: K) {\n  return record.map((r) => r[key]);\n}\n\ntype A = { a: number; b: string };\nconst aList: A[] = [\n  {\n    a: 0,\n    b: 'first',\n  },\n  {\n    a: 1,\n    b: 'second',\n  },\n];\n\n// 두 함수 모두 자동완성 됨\n// 반환값 (string | number)[]\nconsole.log(pluck(aList, 'a')); // [0, 1]\n\n// 반환값 key에 따라 달라짐\nconsole.log(betterPluck(aList, 'a')); // [0, 1]\nconsole.log(betterPluck(aList, 'b')); // ['first', 'second']\n```\n\n### 34. 부정확한 타입보다 미완성된 타입 선호하기\n\nAvoid the uncanny valley of type safety: incorrect types are often worse than no types.\n\n새로운 타입 선언이 더 자세하지만 자동완성을 break한다면 TS 개발 경험을 저해시킬 것이다.\n\n### 35. 데이터가 아닌 API나 스펙을 통해 타입 만들기\n\nThere is no risk that your types and reality diverge since they are both coming from a single source of truth\n\n### 36. 도메인에 맞는 타입 이름 사용하기\n\nSynonym의 사용이 작문에서는 유용해도 코드에서는 그렇지 않음을 알자. 같은 뜻이면 같은 이름을 사용하자 .\n\n구현이 아닌 사용을 중심으로 이름을 지으면 추상화 정도를 높일 수 있고 inadvertent collision?의 위험성을 줄일 수 있다.\n\ndata, info, thing, item, object와 같은 애매하고 무의미한 변수의 사용을 피하자.\n\n### 37. Nominal type에서 brand의 사용 고려해보기\n\n> This is purely a game with the type system.\n\n```ts\ntype AbsolutePath = string & { _brand: 'abs' };\nfunction isAbsolutePath(path: string): path is AbsolutePath {\n  return path.startsWith('/');\n}\nfunction listAbsolutePath(path: AbsolutePath) {\n  // ...\n}\nconst sample = '../../blog_src';\n// listAbsolutePath(sample);\nif (isAbsolutePath(sample)) {\n  listAbsolutePath(sample);\n}\n```\n\n## 5. Working with any\n\n기존에는 fully static type system / fully dynamic type system으로 나뉘었지만, TS의 타입 시스템은 optional/gradual하다.\n\n### 38. 좁은 스코프에서 any 사용하기\n\n함수에서 any 반환값은 전염성이 있다.\n\n에러를 silence하고 싶으면 **@ts-ignore** 활용하기.\n\n```ts\nconst bad: Config = {\n  a: 1,\n  b: 2,\n} as any;\n\nconst good: Config = {\n  a: 1,\n  b: 2 as any,\n};\n```\n\n### 39. 그냥 any보다는 자세한 variant 쓰기\n\n배열이면 any[], 값을 모르는 객체면 {[key: string]: any}.\n\nobject는 원시형이 아닌 모든 타입. 키 순회는 되지만 이걸로 값 접근은 못함.\n\n```ts\nconst numArgsBad = (...args: any) => args.length; // Returns any\nconst numArgsGood = (...args: any[]) => args.length; // Returns number\n```\n\n### 40. 잘 타입된 함수 안에 위험한 type assertion 숨기기\n\n```ts\n// 함수가 마지막 호출을 캐싱하도록 함\n// it doesn’t check that the values of this for successive calls are the same. And if the original function had properties defined on it, then the wrapped function would not have these, so it wouldn’t have the same type.\n\nfunction cacheLast<T extends Function>(fn: T): T {\n  let lastArgs: any[] | null = null;\n  let lastResult: any;\n  return function (...args: any) {\n    // @ts-ignore\n    if (!lastArgs || !shallowEqual(lastArgs, args)) {\n      lastResult = fn(...args);\n      lastArgs = args;\n    }\n    return lastResult;\n  } as unknown as T; // type assertion\n}\n```\n\n### 41. Understand Evolving any\n\n일반적으로 TS에서 타입은 선언될 때 결정되고, 이후에는 refined될 수 있지만 expand될 수는 없다.\n\n> This is only enabled if noImplicitAny is set.\n\n```ts\n// @ts-nocheck\nfunction range(start: number, limit: number) {\n  const out = []; // any[]\n  for (let i = start; i < limit; i++) {\n    out.push(i); // number[]\n  }\n  return out;\n}\n\nlet val; // any\nif (Math.random() < 0.5) {\n  val = /hello/; // any, 책에서는 RegExp라는데 다르네\n  val; // Type is only evoleved after you assign or push an element!!!!\n  // 다른게 아니라 밑에서 확인해야 됐던 것\n} else {\n  val = 12;\n  val; // number\n}\nval; // number | RegExp\n\nlet val2 = null;\nval2; // null\ntry {\n  // somethingDangerous();\n  val2 = 12;\n  val2; // number\n} catch (e) {\n  console.warn('alas!');\n}\nval2; // number | null\n```\n\n왜 안되나 했네,, tsconfig.json 추가하니 잘 됨\n\n그래도 이거 쓰지 말고 타입을 명시해주자.\n\n### 42. 알려지지 않은 타입에는 any 대신 unknown을 사용하자\n\nYAML can represent the same set of values as JSON but allows a superset of JSON’s syntax\n\n모든 타입이 any에 대입 가능하고, any 또한 모든 타입에 대입 가능하다. 하지만 특정 집합이 다른 모든 집합의 subset인 동시에 superset일 수는 없으므로 any는 타입 시스템에 fit하지 못하다.\n\nunknown은 모든 타입이 unknown에 대입 가능하다는 첫번째 속성만 지닌다.\n\nnever는 다른 모든 타입에 대입될 수 있다는 두번째 속성만 지닌다.\n\nunknown은 값이 있다는건 알지만 그 값이 무엇인지 모를 때 유용하다.\n\n```ts\n// type assertion과 다를 것이 없다.\n// unknown을 반환하는 것이 낫다.\nfunction safeParseYAML<T>(yaml: string): T {\n  return parseYAML(yaml);\n}\n```\n\n```ts\nlet barAny = foo as any as Bar;\nlet barUnk = foo as unknown as Bar;\n// 리팩터링으로 쪼개졌을 때 후자가 더 안전하다.\n```\n\n{} 타입은 null과 undefined를 제외한 모든 값이 가능하다. unknown 생기기 전에 많이 씀.\n\nobject 타입은 원시형이 아닌 모든 값이 가능하다.\n\n### 43. Monkey patching보다 타입 안전한 방법 사용하기\n\njQuery 등에서 자주 사용되는 monkey patching은 프로그램의 먼 부분끼리의 의존성을 부주의하게 더할 수 있고, 함수를 부를 때마다 side effect에 대해 생각해보아야되게 한다.\n\n어쩔 수 없이 써야 한다면 augmentation을 활용한다.\n\n```ts\ninterface Document {\n  monkey: string;\n}\n```\n\nmodule context에서는 declare global을 활용한다,,,?\n\n**여기 챕터는 나중에 다시 읽어보기**\n\n- Prefer structured code to storing data in globals or on the DOM.\n\n- If you must store data on built-in types, use one of the type-safe approaches (augmentation or asserting a custom interface).\n\n- Understand the scoping issues of augmentations.\n\n## 44. 타입 안전성의 regression을 막기 위해 type coverage 살피기\n\nexplicit any와 써드파티 선언때문에 any는 언제든 코드에 침범할 수 있다. 주기적으로 프로그램이 얼마나 잘 타입되어있는지 확인하면 좋다.\n\ntype coverage 패키지를 활용할 수 있다.\n\n```bash\nnpx type-coverage --detail\n```\n\n## 6. Types Declarations and @types\n\n의존성 관리는 어떤 언어에서든지 혼란스러울 수 있다.\n\n### 45. TS와 @types를 devDependencies에 넣기\n\nnpm(Node Package Manager)는 package.json을 통해 어떤 버전들에 의존하는지 명시할 수 있게 해준다.\n\ndevDependency는 런타임에 필요하지 않은 것, peerDependency는 don't want to be responsible for tracking?\n\n[peer-dependencies](https://nodejs.org/en/blog/npm/peer-dependencies/)\n\ndevDependency에 TS 버전을 명시하므로써 coworker가 모두 같은 버전을 사용할 수 있다. npx tsc는 그렇게 설치된 버전으로 실행한다.\n\nDefinitelyTyped의 타입 정의는 @types 스코프에서 published되어있다.\n\n### 46. 타입 선언에 얽혀있는 세가지 버전 이해하기\n\n- 패키지의 버전\n- 타입 선언의 버전\n- 타입스크립트의 버전\n\n> Much of the development of TypeScript’s type system has been motivated by an attempt to more precisely type popular JavaScript libraries like Lodash, React, and Ramda\n\n```\nnode_modules/\n  @types/\n    foo/\n      index.d.ts @1.2.3\n    bar/\n      index.d.ts\n      node_modules/\n        @types/\n          foo/\n            index.d.ts @2.3.4\n```\n\n위와 같은 경우 모듈과 달리 타입 선언은 flat global namespace에 있으므로 중복 문제가 발생한다.\n\n뒷 내용은 나중에 다시 읽어보기. 타입 번들링 vs Definitely Typed 관련. 라이브러리가 TS로 쓰였으면 전자, 아니면 후자라고 함.\n\n### 47. Public API에 등장하는 모든 타입을 export하기\n\nPublic method의 타입은 유저가 어떻게든 추출할 수 있기에 숨기지 말고 사용자가 쓰기 쉽게 만들어야한다.\n\n### 48. API 주석에 TSDoc 사용하기\n\n```ts\n// 인삿말 생성. 생성 결과는 표시를 위해 형식화됨.\nfunction greet(name: string, title: string) {\n  return `Hello ${title} ${name}`;\n}\n\n/** 인삿말 생성. 생성 결과는 표시를 위해 형식화됨. */\nfunction greetJSDoc(name: string, title: string) {\n  return `Hello ${title} ${name}`;\n}\n\n/**\n * 인삿말 생성\n * @param name 인사할 사람 이름\n * @param title 사람 타이틀?\n * @returns 사람 읽기 좋게 형식화\n */\nfunction greetFullTSDoc(name: string, title: string) {\n  return `Hello ${title} ${name}`;\n}\n\ngreet('yeolyi', 'title');\ngreetJSDoc('yeolyi', 'title');\ngreetFullTSDoc('yeolyi', 'title');\n```\n\nTSDoc 주석은 마크다운으로 포매팅된다.\n\n### 49. 콜백에서 this의 타입 제공하기\n\n```ts\nclass C {\n  vals = [1, 2, 3];\n  logSquares() {\n    for (const val of this.vals) {\n      console.log(val * val);\n    }\n  }\n}\n\nconst c = new C();\nc.logSquares();\nconst method = c.logSquares;\nmethod(); // Cannot read properties of undefined\n\n// c.logSquares는 C.prototype.logSquares를 호출하고 호출된 함수의 this를 c로 바인딩하는 두가지 일을 한다.\n// logSquares의 참조를 꺼냄으로서 this가 undefined가 되어버린다.\n\nmethod.call(c); // this를 명시해 문제를 해결할 수 있다.\n\n// this의 이러한 성질은 API에서 많이 활용된다.\ndocument.querySelector('input')!.addEventListener('change', function (e) {\n  console.log(this); // 이벤트가 fire된 element를 로깅한다.\n});\n\nclass ResetButton {\n  // onClick만 있으면 ResetButton.prototype의 프로퍼티로서 onClick이 정의된다.\n  // constructor의 구문을 통해 인스턴스 프로퍼티로 onClick을 바꾼다.\n  // 이후 lookup sequence에서 인스턴스 프로퍼티가 우선된다.\n  // 화살표 함수를 사용하면 ResetButton이 생성될 때마다 this가 적합한 값으로 세팅된다.\n  constructor() {\n    this.onClick = this.onClick.bind(this);\n  }\n  render() {\n    // @ts-ignore\n    return makeButton({ text: 'Reset', onClick: this.onClick });\n  }\n  onClick() {\n    alert(`Reset ${this}`);\n  }\n}\n\nfunction addKeyListener(\n  el: HTMLElement,\n  // TS 사용법\n  fn: (this: HTMLElement, e: KeyboardEvent) => void\n) {\n  el.addEventListener('keydown', (e) => {\n    fn.call(el, e);\n  });\n}\n```\n\nthis 써본적이 없어서 와닿지는 않네,, 나중에 다시 읽어보기\n\n### 50. 선언 오버로딩보다 conditional 타입 선호하기\n\n```ts\nfunction double1(x: number | string): number | string;\nfunction double1(x: any) {\n  return x + x;\n}\nconst num1 = double1(12); // string | number\n\nfunction double2<T extends number | string>(x: T): T;\nfunction double2(x: any) {\n  return x + x;\n}\nconst num2 = double2('x'); // \"x\" !!\n\nfunction double3(x: number): number;\nfunction double3(x: string): string;\nfunction double3(x: any) {\n  return x + x;\n}\n\nfunction f1(x: number | string) {\n  // @ts-ignore\n  return double3(x); // No overload matches the call.\n}\n\n// Conditional types are like if statements in type space.\nfunction double<T extends number | string>(x: T): T extends string ? string : number;\nfunction double(x: any) {\n  return x + x;\n}\n\nfunction f2(x: number | string) {\n  /*\n   (number|string) extends string ? string : number\n-> (number extends string ? string : number) |\n   (string extends string ? string : number)\n-> number | string\n  */\n  return double(x);\n}\n```\n\n### 51. Mirror Types to Server Dependencies\n\n필수적이지 않은 의존성을 줄이기 위해 structural typing을 활용한다. JS 유저가 @types에, 웹 개발자가 NodeJS에 의존하기 않도록 한다.\n\n### 52. 타입 테스트의 pitfall 잘 알기\n\n[dtslint](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/dtslint)\n\n- When testing types, be aware of the difference between equality and assignability, particularly for function types.\n- For functions that use callbacks, test the inferred types of the callback parameters. Don’t forget to test the type of this if it’s part of your API.\n- Be wary of any in tests involving types. Consider using a tool like dtslint for stricter, less error-prone checking.’\n\n다시 읽어보기\n\n## 7. Writing and Running Your Code\n\n잡동사니 모음\n\n### 53. ECMAScript 기능을 TS 기능보다 우선하기\n\nJS가 답없던 시절 TS에는 home-grown versions of classes, enums, and modules가 있었음.\n\n이후 JS에 해당 기능들이 추가되었고 TS는 타입 영역만 담당하게 되었지만 그때의 잔재가 남아있고 얘네들은 현재 패턴과 맞지 않으므로 안쓰는 것이 좋음.\n\nenum -> union of literal types\n\n```ts\n// Parameter Properties\nclass Person {\n  name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\nclass Person {\n  constructor(public name: string) {}\n}\n\n// Parameter / non-parameter property를 섞어 쓰면 보기 좋지 않음\n// TS의 다른 부분의 패턴과도 맞지 않고, 저자는 지양하는 중\n```\n\n일반적으로 TS 컴파일은 타입만 지우지만 parameter properties, triple-slash imports, decorator는 드물게 코드를 추가함.\n\n### 54. 객체 iterate하는 법 알기\n\n```ts\ninterface ABC {\n  a: string;\n  b: string;\n  c: number;\n}\n\n// 함수 foo는 { a: 'a', b: 'b', c: 2, d: new Date()} 로도 호출될 수 있다.\nfunction foo(abc: ABC) {\n  for (const k in abc) {\n    // const v = abc[k];\n  }\n}\n```\n\nprototype pollution을 유념해야한다. for-in은 언제나 부가적인 키 값을 반환할 수 있다.\n\nlet k: keyof T나 for-in은 순회 대상을 정확하게 알 때 사용하고, 나머지는 Object.entries를 사용하자.\n\n### 55. DOM 계층 이해하기\n\n## 8. Migrating to TypeScript\n\n마이그레이션 상황이 일단 없어 패스\n","path":"language/typescript/effective-typescript/index.md"}